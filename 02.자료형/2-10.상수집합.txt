Enum은 서로 관련이 있는 여러개의 상수 집합을 정의할 때 사용하는 자료형

-Enum 만들기-
ex)
public class Sample {
    enum CoffeeType {
        AMERICANO,
        ICE_AMERICANO,
        CAFE_LATTE
    };

    public static void main(String[] args) {
        System.out.println(CoffeeType.AMERICANO);  // AMERICANO 출력
        System.out.println(CoffeeType.ICE_AMERICANO);  // ICE_AMERICANO 출력
        System.out.println(CoffeeType.CAFE_LATTE);  // CAFE_LATTE 출력
    }
}

or

public class Sample {
    enum CoffeeType {
        AMERICANO,
        ICE_AMERICANO,
        CAFE_LATTE
    };

    public static void main(String[] args) {
        for(CoffeeType type: CoffeeType.values()) {
            System.out.println(type);  // 순서대로 AMERICANO, ICE_AMERICANO, CAFE_LATTE 출력
        }
    }
}

CoffeeType.values()는 CoffeeType의 배열을 리턴


-Enum은 왜 필요한가?-
ex)
/**
 * countSellCoffee는 판매된 커피의 갯수를 리턴하는 메서드이다.
 * @pavram type 커피의 종류 (1: 아메리카노, 2: 아이스 아메리카노, 3: 카페라떼)
 */
int countSellCoffee(int type) {
    ... 생략 ...
}
countSellCoffee메서드는 커피의 종휴별로 판매된 커피의 갯수를 리턴하는 메서드

아메리카노의 판매 갯수를 알기 위해서는 다음과 같이 숫자 1을 넘겨야 함
ex)
int americano = countSellCoffee(1);
이 방식은 숫자 1이 아메리카노임을 기억하고 사용해야 한다는 불편함이 있음

ex)
int result = countSellCoffee(99);  // 99 타입은 존재하지 않으므로 오류가 발생한다.
이 방법도 문제가 발생
1, 2, 3 이라는 인수의 값과 의미에 대해 명확히 알고 있다면 위와 같은 오류는 잘 발생하지 않겠지만 오류의 가능성은 여전히 존재

ex)
enum CoffeeType {
    AMERICANO,
    ICE_AMERICANO,
    CAFE_LATTE
};

/**
 * countSellCoffee는 판매된 커피의 갯수를 리턴하는 메서드이다.
 * @param type 커피의 종류 (CoffeType)
 */
int countSellCoffee(CoffeType type) {
    ... 생략 ...
}

메서드를 변경하면 이 메서드를 호출하려면 다음과 같이 숫자 대신 CoffeeType을 인수로 사용

ex)
int americano = countSellCoffee(CoffeType.AMERICANO);  // 아메리카노의 판매갯수

숫자 1을 사용했을때 보다 코드가 명확해 진다. 그리고 countSellCoffee 메서드에는 CoffeType에 정의된 상수만 전달할 수 있기 때문에 위에서 보았던 99처럼 엉뚱한 숫자값에 의한 오류가 발생하지 않음

**장점**
-매직넘버(1과 같은 숫자 상수값)를 사용할 때보다 코드가 명확해짐
-잘못된 값을 사용함으로 인해 발생할수 있는 위험성이 사라짐
