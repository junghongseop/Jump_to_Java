-객체에 대하여-
ex)
class Animal{
}

public class Sampel{
	public static void main(String[] args){
	}
}

클래스는 특별한 경우가 아니라면 파일단위로 하나씩 작성
Animal클래스는 Animal.java파일에 단독으로 작성하는 것이 일반적인 방법


Animal클래스는 가장 간단한 형태의 클래스
클래스의 선언만 있고 내용이 없는 껍데기뿐인 클래스
껍데기뿐인 클래스도 아주 중요한 기능을 가지고 있으며 그 기능이 객체를 만드는 기능임

ex)
class Animal{
}

public class Sample{
	public static void main(String[] args){
		Animal cat = new Animal();
	}
}

new는 객체를 생성할 때 사용하는 키워드
Animal클래스의 인스턴스인 cat
즉, Animal의 객체가 만들어짐

*객체와 인스턴스
클래스에 의해서 만들어진 객체를 인스턴스라고도 함

Animal cat = new Animal() 처럼 만들어진 cat은 객체임
cat이라는 객체는 Animal의 인스턴스임
인스턴스라는 말은 특정 객체가 어떤 클래스의 객체인지를 관계위로 설명할 때 사용
즉, "cat은 인스턴스"보다는 "cat은 객체"라는 표현이 "cat은 Animal의 객체"보다는 "cat은 Animal의 인스턴스"라는 표현이 훨씬 잘 어울림

-객체 변수-
ex)
class Animal{
	String name;
}

public class Sample{
	public static void main(String[] args){
		Animal cat = new Animal();
	}
}

Animal클래스에 name이라는 String변수를 추가
클래스에 선언된 변수를 객체 변수라고 함
객체 변수는 인스턴스 변수, 멤버 변수, 속성이라고도 함

객체 변수는 변수이므로 값을 대입할 수 있을 것
객체 변수를 출력하려면 객체 변수에 어떻게 접근해야 하는지 알아야 함
객체 변수는 도트 연산자를 이용하여 접근할 수 있음

객체.객체변수

ex)
class Animal{
	String name;
}

public class Sample{
	public static void main(String[] args){
		Animal cat = new Animal();
		System.out.println(cat.name);	//null출력
	}
}

cat.name을 출력한 결과값으로 null이 나옴
null은 값이 할당되어 있지 않은 상태를 말함
객체 변수로 name을 선언했지만 아무런 값도 대입을 하지 않았기 때문에 null이라는 값이 출력된 것

-메서드-
클래스에는 객체변수와 메서드라는 것이 있음
메서드는 클래스 내에 구현된 함수를 의미하는데 보통 함수라고 말하지 않고 메서드라고 말함

ex)
class Animal{
	String name;

	public void setName(String name){
		this.name = name;
	}
}

public class Sample{
	public static void main(String[] args){
		Animal cat = new Animal();
		System.out.println(cat.name);
	}
}

• 입력: String name
• 출력: void(리턴값 없음)

입력으로 name이라는 문자열을 받고 출력은 없는 형태의 메서드

setName메서드가 가지고 있는 것
this.name = name;

객체 변수에 접근하기 위해서 객체.변수와 같이 도트연산자로 접근할 수 있었던것과 마찬가지로 객체가 메서드를 호출하기 위해서는 객체.메서드로 호출해야 함

setName메서드를 호출하려면
cat.setName("boby");

setName메서드의 입력으로 "boby"와 같은 문자열을 전달해야 함
왜냐하면 메서드는 입력항목으로 문자열을 필요로 하기 때문에

ex)
class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("boby");  // 메서드 호출
        System.out.println(cat.name);
    }
}

cat.name을 출력하기 전에 setName메서드가 먼저 호출 될것임

main메서드에서 cat.setName("boby")와 같이 "boby"라는 입력값으로 setName메서드를 호출했기 때문에 setName함수의 입력항목 name에는 "boby"라는 문자열이 전달될 것

따라서 setName메서드의 this.name = name;문장은 this.name = "boby";라고 해석됨

setName메서드 내부에 사용된 this는 Animal클래스에 의해서 생성된 객체를 지칭함
Animal cat = new Animal()과 같이 cat이라는 객체를 만들고 cat.setName("boby")와 같이 cat객체에 의해 setName메서드를 호출하면 setName메서드 내부에 선언된 this는 바로 cat객체를 지정

this.name = "boby";는 cat.name = "boby";라고 해석됨


객체.객체변수 = 값

cat.name = "boby"라는 문장은 객체cat의 객체변수 name에 "boby"라는 값을 대입

-객체변수는 공유되지 않는다-
ex)
class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("boby");

        Animal dog = new Animal();
        dog.setName("happy");
    }
}

cat객체에는 "boby"라는 이름을 대입하고 dog객체에는 "happy"라는 이름을 대입
setName메서드에 의해 문장이 두번 실행될 것임

cat.name = "boby";
dog.name = "happy";

ex)
class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("boby");  // 메서드 호출

        Animal dog = new Animal();
        dog.setName("happy");

        System.out.println(cat.name);	//boby출력
        System.out.println(dog.name);	//happy출력
    }
}

결과를 보면 name객체 변수는 공유되지 않는다것을 확인할 수 있음

클래스에서 가장 중요한 부분은 객체 변수의 값이 독립적으로 유지된다는 점
객체지향적이라는 말의 의미도 객체 변수의 값이 독립적으로 유지되기 때문에 가능한것



