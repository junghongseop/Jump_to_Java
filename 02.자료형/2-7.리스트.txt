리스트는 배열과 비슷한 자바의 자료형으로 배열보다 편리한 기능을 많이 가지고 있음

리스트와 배열의 가장 큰 차이는 배열은 크기가 정해져 있지만 리스트는 크기가 정해져 있지 않고 동적으로 변한다는 점
리스트는 정해져 있지 않아 원하는 만큼의 값을 담을 수 있음

동적으로 자료형의 갯수가 변하는 상황이라면 List를 사용

-ArrayList-
List자료형
List자료형에는 ArrayList, Vector, LinkedList등의 List인터페이스를 구현한 자료형이 있음

-add-
ex)
import java.util.ArrayList;

public class Sample {
    public static void main(String[] args) {
        ArrayList pitches = new ArrayList();
        pitches.add("138");
        pitches.add("129");
        pitches.add("142");
    }
}

*ArrayList를 사용하기 위해서는 import java.util.ArrayList와 같이 ArrayList를 먼저 import해야 함

Array객체인 pitches에 add라는 메서드를 이용하여 저장함
만약 첫번째 위치에 "133"이라는 투구 스피드를 삽입하고 싶다면 아래와 같이 삽입할 위치를 파라미터로 넘겨주어야 함

ex)
pitches.add(0, "133");    // 첫번째 위치에 133 삽입.

만약 두번 째 위치에 133을 삽입 할 경우에는

ex)
pitches.add(1, "133");

-제네릭스-
자바는 ArrayList<String> pitches = new ArrayList<>();처럼 객체를 포함하는 자료형도 어떤 객체를 포함하는 지에 대해서 명확하게 표현할 것을 권고함

-get-
import java.util.ArrayList;

public class Sample {
    public static void main(String[] args) {
        ArrayList pitches = new ArrayList();
        pitches.add("138");
        pitches.add("129");
        pitches.add("142");
        System.out.println(pitches.get(1));	//129출력
    }
}

ArrayList의 get메서드를 이용하면 특정 인덱스의 값을 추출할 수 있음

-size-
size메서드는 ArrayList의 갯수를 리턴

ex)
System.out.println(pitches.size());	//3출력

pitches에 담긴 갯수가 출력

-contains-
리스트 안에 해당 항목이 있는지를 판별하여 그 결과를 boolean으로 리턴

ex)
System.out.println(pitches.contains("142"));

-remove-
1.객체
2.인덱스

객체의 경우는 리스트에서 객체에 해당되는 항목을 삭제하고 삭제한 결과를 리턴

인덱스의 경우는 해당 인덱스의 항목을 삭제하고 삭제된 항목을 리턴

-제네릭스-
ex)
ArrayList<String> pitches = new ArrayList<String>();

뒷부분의 자료형은 궅이 적지 않아도 의미가 명확하기 때문에 사용하는 것이 좋음

ex)
ArrayList<String> pitches = new ArrayList<>();  // 선호되는 방식


ArrayList pitches = new ArrayList();
두 개 코드의 차이점은 ArrayList라는 자료형 타입 바로 옆에 <String>과 같은 문구가 있느냐 없느냐의 차이임

<String>이라는 제네릭스 표현식은 "ArrayList"안에 담을 수 있는 자료형은 String타입 뿐이다"라는 것을 의미
즉, 제네릭스를 이용하면 좀 더 명확한 타입체크가 가능

제네릭스를 사용하지 않은 경우)
ArrayList pitches = new ArrayList();
pitches.add("138");
pitches.add("129");

String one = (String) pitches.get(0);
String two = (String) pitches.get(1);

제네릭스를 사용하지 않을 경우에는 ArrayList안에 추가되는 객체는 Object자료형으로 인식
Object자료형은 모든 객체가 상속하고 있는 가장 기본적인 자료형
따라서 ArrayList객체인 pitches에 값을 넣을 때는 문제가 안되지만 값을 가져올 경우엔 항상 Object자료형으로 형변환을 해야 함

ex)
String one = (String) pitches.get(0); // Object 자료형을 String 자료형으로 캐스팅한다.

주의할 점
-pitches안에는 String객체 이외의 객체도 넣을 수 있기 때문에 형 변환 과정에서 잘못된 형변환으로 인한 오류가 발생할 가능이 있음

제네릭스를 사용한 경우)
ArrayList<String> pitches = new ArrayList<>();
pitches.add("138");
pitches.add("129");

String one = pitches.get(0);  // 형 변환이 필요없다.
String two = pitches.get(1);  // 형 변환이 필요없다.

제네릭스로 자료형을 선언하기만 하면 그 이후로는 자료형에 대한 형변환 과저이 필요없음
컴파일러가 pitches에는 반드시 String자료형만 추가 되어야 함을 알기 때문임

-다양한 ArrayList만들기-
ArrayLsit의 add메서드를 사용하면 ArrayList객체에 요소를 추가할 수 있음

ex)

import java.util.ArrayList;

public class Sampel{
	public static void main(String[] args){
		ArrayList<String> pitches = new ArrayList<>(); //제네릭스를 사용한 표현
		pitches.add("138");
		pitches.add("129");
		pitches.add("142");
		System.out.println(pitches);  //[138, 129, 142]출력
	}
}

또는

import java.util.ArrayList;
import java.util.Arrays;

public class Sample {
    public static void main(String[] args) {
        String[] data = {"138", "129", "142"};  // 이미 투구수 데이터 배열이 있다.
        ArrayList<String> pitches = new ArrayList<>(Arrays.asList(data));
        System.out.println(pitches);  // [138, 129, 142] 출력
    }
}

java.util.Arrays클래스의 asList메서드를 사용하면 이미 존재하는 문자열 배열로 ArrayList를 생성할수 있음

String 배열대신 String자료형을 여러개 전달하여 생성하는 예)

import java.util.ArrayList;
import java.util.Arrays;

public class Sample {
    public static void main(String[] args) {
        ArrayList<String> pitches = new ArrayList<>(Arrays.asList("138", "129", "142"));
        System.out.println(pitches);
    }
}

-리스트 정령-
순서대로 정렬하기 위해서는 리스트의 sort메서드를 사용

ex)

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class Sample {
    public static void main(String[] args) {
        ArrayList<String> pitches = new ArrayList<>(Arrays.asList("138", "129", "142"));
        pitches.sort(Comparator.naturalOrder());  // 오름차순으로 정렬
        System.out.println(pitches);  // [129, 138, 142] 출력
    }
}

sort메서드에는 정렬기준을 파라미터로 전달
정렬기준에는 오름차순, 내림차순이 있음

-오름차순(순방향)정렬 - Comparator.naturalOrder()
-내림차순(역방향)정렬 - Comparator.reverseOrder()
