자바는 클래스를 떠나 존재하는 것은 있을 수 없기 때문에 자바의 함수는 따로 존재하지 않고 클래스 내에 존재
-> 클래스 내의 함수를 메서드라고 부름

-메서드를 사용하는 이유?
메서드가 필요할 때 = 똑같은 내용을 반복적으로 해야 할 때

int sum(int a, int b){
	return a+b;
}

"sum메서드는 입력값으로 두개의 값을 받으며 리턴값은 두개의 입력 값을 더한 값"

return은 메서드의 결괏값을 돌려주는 명령어

ex)
public class Sample {
    int sum(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        int a = 3;
        int b = 4;

        Sample sample = new Sample();
        int c = sample.sum(a, b);

        System.out.println(c);
    }
}


-매개변수와 인수-
매개변수는 메서드에 전달된 입력값을 저장하는 변수를 의미
인수는 메서드를 호출할 때 전달하는 입력값을 의미

ex)
public class Sample {
    int sum(int a, int b) {  // a, b 는 매개변수
        return a+b;
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        int c = sample.sum(3, 4);  // 3, 4는 인수

        System.out.println(c);
    }
}


-메서드의 입력값과 리턴값-
입력값 -> 메서드 -> 리턴값

*메서드의 구조
리턴자료형 메서드명(입력자료형1 매개변수1, 입력자료형2 매개변수2, ...) {
    ...    
    return 리턴값;  // 리턴자료형이 void 인 경우에는 return 문이 필요없다.
}

리턴 자료형은 메서드 수행후 리턴되는 값의 자료형을 의미
메서드는 결괏값을 반환하기 위해 return이라는 키워드를 사용

입출력 유무에 따른 분류

• 입력과 출력이 모두 있는 메서드
• 입력과 출력이 모두 없는 메서드
• 입력은 없고 출력은 있는 메서드
• 입력은 있고 출력은 없는 메서드


*입력값과 리턴값이 모두 있는 메서드

int sum(int a, int b) {
    return a+b;
}

sum메서드의 입출력 자료형
• 입력값: int자료형 a, int자료형 b
• 리턴값: int자료형

sum메서드는 두개의 입력값을 받아서 더한 결괏값을 돌려주는 메서드

입력값과 리턴값이 있는 메서드를 호출
리턴값_받을 변수 = 객체.메서드명(입력인수1, 입력인수2, ...)

ex)
Sample sample = new Sample();
int result = sample.sum(3, 4);

sample.sum(3, 4) 호출 후 리턴값을 저장하는 result의 자료형은 int로 해야만 함
-> sum메서드의 리턴 자료형이 int로 되어 있기 때문

sum메서드의 리턴 자료형은 int sum(int a, int b)에서 보듯이 메서드명 바로 왼쪽에 표기


*입력값이 없는 메서드

String say() {
    return "Hi";
}

say메서드의 입출력 자료형
• 입력값: 없음
• 리턴값: String자료형

입력 인수가 없을 경우에는 괄호 안을 비워 놓으면 됨

public class Sample {
    String say() {
        return "Hi";
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        String a = sample.say();
        System.out.println(a);  // "Hi" 출력
    }
}

say 메서드를 쓰기 위해서는 say()처럼 괄호 안에 아무런 값도 넣지 않고 써야 함
say메서드는 입력값은 없지만 리턴값으로 Hi라는 문자열을 리턴
String a = sample.say()의 a에는 Hi라는 문자열이 대입됨

리턴값_받을_변수 = 객체.메서드명()


*리턴값이 없는 메서드
void sum(int a, int b) {
    System.out.println(a+"과 "+b+"의 합은 "+(a+b)+"입니다.");
}

sum메서드의 입출력 자료형
• 입력값: int 자료형 a, int 자료형 b
• 리턴값: void(리턴값 없음)

리턴값이 없는 메서드는 리턴 자료형 부분에 void라고 표기

public class Sample {
    void sum(int a, int b) {
        System.out.println(a+"과 "+b+"의 합은 "+(a+b)+"입니다.");
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        sample.sum(3, 4);
    }
}

System.out.prinln문은 메서드 내에서 사용되는 문장일뿐 리턴값은 없음
리턴값은 오직 return명령어로만 반환이 가능

객체.메서드명(입력인수 1, 입력인수 2, ...)


*입력값과 리턴값이 모두 없는 메서드
void say() {
    System.out.println("Hi");
}

say메서드의 입출력 자료형
• 입력값: 없음
• 리턴값: void

public class Sample {
    void say() {
        System.out.println("Hi");
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        sample.say();
    }
}

객체.메서드명()


-return의 또 다른 쓰임-
메서드를 빠져나가고 싶다면 return을 단독으로 사용하여 메서드를 빠져나갈 수 있음

public class Sample {
    void sayNick(String nick) {
        if ("바보".equals(nick)) {
            return;
        }
        System.out.println("나의 별명은 "+nick+" 입니다.");
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        sample.sayNick("야호");
        sample.sayNick("바보");  // 출력되지 않는다.
    }
}


sayNick메서드는 입력으로 받은 문자열을 포함한 문장을 출력
메서드 역시 리턴값은 없음
return은 메서드를 호출한 곳에 리턴값을 돌려주는 역할이 아니라 메서드를 즉시 빠져나가는 역할
입력값으로 값이 들어오면 문자열을 출력하지 않고 메서드를 즉시 빠져나감


-메서드 내에서 선언된 변수의 효력 범위-

public class Sample {
    void varTest(int a) {
        a++;
    }

    public static void main(String[] args) {
        int a = 1;
        Sample sample = new Sample();
        sample.varTest(a);
        System.out.println(a);
    }
}

1. main메서드에서 a라는 int자료형의 변수를 생성하고 a에 1을 대입
2. varTest메서드를 입력값으로 a를 주어 호출
3. a의 값을 출력

void varTest(int a)라는 문장에서 매개변수 a는 메서드 안에서만 쓰이는 변수이지 메서드 밖의 변수a가 아님


매개변수 이름을 a로 사용한 varTest메서드는 매개 변수 이름을 b로 사용한 varTest와 기능적으로 완전히 동일

public void varTest(int b) {
    b++;
}

메서드에서 쓰이는 매개 변수의 이름과 메서드 밖의 변수 이름이 같더라도 서로 전혀 영향을 주지 않음



public class Sample {
    int varTest(int a) {
        a++;
        return a;
    }

    public static void main(String[] args) {
        int a = 1;
        Sample sample = new Sample();
        a = sample.varTest(a);
        System.out.println(a);
    }
}

varTest메서드는 입력으로 들어온 값을 1만큼 증가시켜 리턴
a = sample.varTest(a)처럼 작성하면 a의 값은 다시 varTest메서드의 리턴값으로 대입

메서드에 값을 전달하는 것과 객체를 전달하는 것에는 큰 차이가 있음
객체를 메서드의 입력으로 넘기고 메서드가 객체의 속성값을 변경하면 메서드 수행 이후에도 객체는 변경된 속성값을 유지


public class Sample {

    int a;  // 객체변수 a

    void varTest(Sample sample) {
        sample.a++;
    }

    public static void main(String[] args) {
        Sample sample = new Sample();
        sample.a = 1;
        sample.varTest(sample);
        System.out.println(sample.a);
    }
}

int자료형인 변수a를 Sample클래스의 객체 변수로 선언
varTest메서드는 Sample클래스의 객체를 입력받아 해당 객체의 a값을 1만큼 증가시키도록 했음

varTest메서드의 입력 파라미터가 값이 아닌 Sample클래스의 객체에 있음
메서드가 객체를 전달받으면 메서드 내의 객체는 전달받은 객체 그 자체로 수행

-> 입력으로 전달받은 sample객체의 객체 변수 a의 값이 증가하게 되는 것


메서드의 입력항목이 값인지 객체인지를 구별하는 기준은 입력 항목의 자료형이 원시 자료형인지 아닌지에 따라 나뉨
int자료형과 같이 원시 자료형인 경우 값이 전달되고 그 이외의 경우는 객체가 전달

