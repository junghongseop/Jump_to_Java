-문자열-
문자열이란 문자들로 구성된 문장을 뜻함
자바에서 문자열을 나타내는 자료형은 String

ex)
String a = "Happy Java";
String b = "a";
String c = "123";

또는 

String a = new String("Happy Java");
String b = new String("a");
Sting c = new String("123");

new키워드는 객체를 만들때 사용

***"객체" = "새로 생성된 자료형" 

문자열을 표현할 때는 가급적 첫번째 방식을 사용하는 것이 좋음
이유는 가독성에 이점이 있고 컴파일 시 최적화에 도움을 주기 때문에

-원시 자료형-
int, long, double, float, boolean, char자료형을 원시 자료형이라고 부름
primitive자료형은 new키워드로 그 값을 생성할 수 없음

boolean result = true;
char a = 'A';
int i = 100000;

String은 "Happy Java"와 같이 리터럴 표기가 가능하지만 primitive자료형은 아니다.
String은 리터럴 표현식을 사용할 수 있도록 자바에서 특별 대우 해 주는 자료형

-문자열 내장 메서드-

*equals*
equals는 두개의 문자열이 동일한지를 비교하여 결과값을 리턴

ex)
String a = "hello";
String b = "java";
String c = "hello";
System.out.println(a.equals(b)); 	// false 출력
System.out.println(a.equals(c)); 	// true 출력

문자열 a 와 문자열 b 는 "hello"와 "java"로 서로 같지 않다.
따라서 equals 메서드 호출 시 false 를 리턴

문자열 a 와 문자열 c 는 "hello"와 "hello"로 서로 같다. 
따라서 true 를 리턴

문자열의 값을 비교할때는 반드시 equals를 사용해야 함

==연산자를 사용할 경우 
String a = "hello";
String b = new String("hello");
System.out.println(a.equals(b));  // true
System.out.println(a == b);  // false


문자열 a와 b는 모두 "hello"로 같은 값이지만 equals를 호출했을 때는 true를, ==연산자를 이용했을 때는 false를 리턴
a와 b는 값은 같지만 서로 다른 객체이다.

==은 두개의 자료형이 동일한 객체인지를 판별할 때 사용하는 연산자이기 때문에 flase를 리턴


*indexOf"
indexOf는 문자열에서 시작되는 위치를 리턴

문자열 중 "Java"라는 문자열이 시작되는 위치를 알고 싶은 경우 indexOf를 사용

ex)
String a = "Hello Java";
System.out.println(a.indexOf("Java"));  // 6 출력

"Hello Java"라는 문자열에서 "Java"라는 문자열은 일곱번째 문자부터 시작
결과값이 7이 아닌 6으로 나온 이유는 자바는 숫자를 0부터 세기 때문이다.

*contains*
contains는 문자열에서 특정 문자열이 포함되어 있는지의 여부를 리턴

ex)
String a = "Hello Java";
System.out.println(a.contains("Java"));  // true 출력

문자열 a는 "Java"라는 문자열을 포함하고 있기 때문에 true를 리턴


*charAt*
charAt은 문자열에서 특정 위치의 문자(char)를 리턴

"Hello Java" 문자열에서 "J"라는 문자는 6번째 인덱스에 위치한 문자

ex)
String a = "Hello Java";
System.out.println(a.charAt(6));  // "J" 출력


*replaceAll*
replaceAll은 문자열 중 특정 문자열을 다른 문자열로 바꾸고자 할 때 사용

ex)
String a = "Hello Java";
System.out.println(a.replaceAll("Java", "World"));  // Hello World 출력


*substring*
substring은 문자열 중 특정 부분을 뽑아낼 경우에 사용

ex)
String a = "Hello Java";
System.out.println(a.substring(0, 4));  // Hell 출력

substring와 같이 사용하면 문자열의 시작위치에서 끝 위치까지의 문자를 뽑아내게 됨
단, 끝위치는 포함이 안된다는 점에서 주의!!

*시작 <= a < 끝위치


*toUpperCase*
toUpperCase는 문자열을 모두 대문자로 변경할 때 사용
Strig a = "Hello Java";
System.out.println(a.toUpperCase());	//HELL JAVA출력


*split*
split 메서드는 문자열을 특정 구분자로 나누어 문자열 배열로 리턴하는 메서드 

ex)
String a = "a:b:c:d";
String[] result = a.split(":");  // result는 {"a", "b", "c", "d"}


-문자열 포매팅-
문자열에는 문자열 포매팅이 있음
문자열 안의 특정한 값을 바꿔야 할 경우가 있을 때 이것을 가능하게 해주는 것이 바로 문자열 포매팅 기법

=> 문자열 포매팅이란 문자열 안에 어떤 값을 삽입하는 방법

ex)
1. 숫자 바로 대입
System.out.println(String.format("I eat %d apples.", 3));  // "I eat 3 apples." 출력

문자열 포매팅은 Strig.format메서드를 사용
문자열 안에 정수 3을 삽입하는 방법을 보여 줌
문자열 안에서 숫자를 넣고 자리에 %d 문자를 넣어 주고, 삽입할 숫자 3은 두번째 파라미터로 전달
=%d는 문자열 포맷 코드라고 함

2.문자열 바로 대입
System.out.println(String.format("I eat %s apples.", "five"));  // "I eat five apples." 출력

숫자를 넣기 위해서는 %d를 써야하고, 문자열을 넣기 위해서는 %s를 써야 한다는 사실을

3.숫자 값을 나타내는 변수로 대입
int number = 3;
System.out.println(String.format("I eat %d apples.", number));  // "I eat 3 apples." 출력

4.2개 이상의 값 넣기
int number = 10;
String day = "three";
System.out.println(String.format("I ate %d apples. so I was sick for %s days.", number, day));

-문자열 포맷 코드-
코드	설명
%s	문자열
%c	문자 
%d	정수
%f	부동소수
%o	8진수
&x	16진수
%%	Listeral%

-포맷 코드와 숫자 함깨 사용-
포맷코드는 문자열 안에 어떤 값을 삽입하기 위해서 사용
코드를 숫자와 함깨 사용하면 더 유용하게 사용 가능

ex)
1.정렬과 공백
System.out.println(String.format("%10s", "hi"));  // "        hi" 출력

앞에 예문에서 %10s는 전체 길이가 10개인 문자열 공간에서 대입되는 값을 오른쪽으로 그앞의 나머지는 공백으로 남겨두라는 의미

2. 소수점 표현하기
ex)
System.out.println(String.format("%.4f", 3.42134234));  // 3.4213 출력

'.'의 의미는 소수점 포인트를 말하고 그 뒤의 숫자 4는 소수점 뒤에 나올 숫자의 개수

-System.out.prinf-
String.format메서는 포매팅된 문자열을 리턴
따라서 포매팅된 문자열을 출력하려면 System.out.println메서드를 함께 사용

ex)
System.out.println(String.format("I eat %d apples.", 3));

하지만 System.out.printf메서드를 사용하면 Strig.fromat 메서드 없이도 동일한 형식으로 포매팅된 문자열을 출력 가능

ex)
System.out.printf("I eat %d apples.", 3);  // "I eat 3 apples." 출력

String.format과  System.out.printf의 차이는 전자는 문자열을 리턴하는 메서드이고 후자는 문자열을 출력하는 메서드이다.