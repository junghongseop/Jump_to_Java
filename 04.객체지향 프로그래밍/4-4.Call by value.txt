메서드에 값을 전달하는 것과 객체를 전달하는 것에는 큰 차이가 있음
메서드에 객체를 전달할 경우 메서드에서 객체 변수의 값을 변경 할 수 있음

class Updater{
	void update(int count) {
		count++;
	}
}

class Counter {
	int count = 0; //객체 변수
}

public class Ex{
	public static void main(String[] args) {
		Counter myCounter = new Counter();
		System.out.println("before update: " + myCounter.count);
		Updater myUpdater = new Updater();
		myUpdater.update(myCounter.count);
		System.out.println("after update: " + myCounter.count);
	}
}

Updater클래스는 전달받은 숫자를 1만큼 증가시키는 update라는 메서드를 가지고 있음
Counter클래스는 count라는 객체 변수를 가지고 있음
Ex클래스의 main메서드는 Counter클래스에 의해 생성된 myCounter객체의 객체 변수인 count값을 Updater클래스를 이용하여 증가시킬려함

결과는
before upate: 0
after update: 0

객체 변수 count의 값을 update메서드에 넘겨서 변경시키더라도 값에 변화가 없음
update메서드는 값(int 자료형)을 전달받았기 때문

원하는 결과로 변경
class Updater {
    void update(Counter counter) {
        counter.count++;
    }
}

class Counter {
    int count = 0;  // 객체변수
}

public class Sample {
    public static void main(String[] args) {
        Counter myCounter = new Counter();
        System.out.println("before update:"+myCounter.count);
        Updater myUpdater = new Updater();
        myUpdater.update(myCounter);
        System.out.println("after update:"+myCounter.count);
    }
}

차이점
update메서드의 입력 항목에 있음
이전에는 int count와 같이 값을 전달바았다면 지금은 Counter counter와 같이 객체를 전달받도록 변경한 것

update메서드를 호출하는 부분 변경후
myUpdater.update(myCounter);

결과
before update: 0
after update: 1

myCounter객체의 count값이 1만큼 증가
메서드의 입력으로 객체를 전달하면 메서드가 입력받은 객체를 그대로 사용하기 때문에 메서드가 객체의 속성값을 변경하면 메서드 수행 후에도 객체의 변경된 속성값이 유지