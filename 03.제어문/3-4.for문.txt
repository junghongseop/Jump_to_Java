for문도 while문과 같이 문장을 반복해서 수행해야 할 경우에 사용함

-for문의 구조-
ex)
String[] numbers = {"one", "two", "three"};
for(int i=0; i<numbers.length; i++) {
    System.out.println(numbers[i]);
}

결과
one
two
three

for문의 조건문은 세미콜론을 구분자로 세부분으로 나뉘어짐

for (초기값; 조건문; 증가치) {
    ...
}

-for와 continue-
for문 안의 문장을 수행하는 도중에 continue문을 만나면 for문의 처음으로 돌아감

ex)
int[] marks = {90, 25, 67, 45, 80};
for(int i=0; i<marks.length; i++) {
    if (marks[i] < 60) {
        continue;  // 조건문으로 돌아간다.
    }
    System.out.println((i+1)+"번 학생 축하합니다. 합격입니다.");
}

결과
1번 학생 축하합니다. 합격입니다.
3번 학생 축하합니다. 합격입니다.
5번 학생 축하합니다. 합격입니다.

점수가 60점 미만인 학생일 경우에는 marks[i] < 60이 참이 되어 continue문이 수행
따라서 축하 메세지를 출력하는 부분을 수행하지 않고 for문의 첫부분으로 돌아가게 됨

-이중 for문-
ex)
for(int i=2; i<10; i++) {
    for(int j=1; j<10; j++) {
        System.out.print(i*j+" ");
    }
    System.out.println("");  // 줄을 바꾸어 출력하는 역할을 한다.
}

결과
2 4 6 8 10 12 14 16 18 
3 6 9 12 15 18 21 24 27 
4 8 12 16 20 24 28 32 36 
5 10 15 20 25 30 35 40 45 
6 12 18 24 30 36 42 48 54 
7 14 21 28 35 42 49 56 63 
8 16 24 32 40 48 56 64 72 
9 18 27 36 45 54 63 72 81

for가 두번 사용됨
먼저 2부터 9까지의 숫자가 차례로 i에 대입
i가 처음 2일때 다시 for문을 만나게 됨
1부터 9까지의 숫자가 j에 대입되고 그 다음 문장인  System.out.print(i*j+" ");를 수행함

따라서 i가 2일때 2*1, 2*2....2*9까지 차례로 수행되며 그 값을 출력하게 됨

System.out.print와 System.out.println을 구분하여 사용
System.out.print은 줄바꿈문자 \n을 포함하지 않고 출력을 하고
System.out.println은 마지막에 \n을 포함하여 출력하는 차이가 있음

한 단이 끝날때마다 줄바꿈 문자를 출력하기 위해 위와 같이 구분하여 사용